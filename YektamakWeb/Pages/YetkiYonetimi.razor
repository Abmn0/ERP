@page "/yetki-yonetimi"
@attribute [Authorize(Roles = "Admin")]

@inject IRolService RolService
@inject IMenuService MenuService
@inject IYetkiService YetkiService

<h3>Yetki Yönetimi</h3>

@if (roller == null || menuler == null)
{
    <p>Yükleniyor...</p>
}
else
{
    <div class="mb-3">
        <label>Rol Seçin:</label>
        <select class="form-select w-50" @onchange="OnRolChanged">
            <option value="0">-- Rol Seçin --</option>
            @foreach (var rol in roller)
            {
                <option value="@rol.Id">@rol.Ad</option>
            }
        </select>
    </div>

    @if (SeciliRolId > 0)
    {
        <!-- YENİ: Toplu seçim butonları -->
        <div class="d-flex justify-content-between align-items-center mb-3 p-3 bg-light rounded">
            <div>
                <button class="btn btn-secondary me-2" @onclick="TumunuSec">
                    <i class="oi oi-check me-1"></i> Tümünü Seç
                </button>
                <button class="btn btn-outline-secondary" @onclick="TumSecimleriKaldir">
                    <i class="oi oi-x me-1"></i> Tüm Seçimleri Kaldır
                </button>
            </div>
            <button class="btn btn-primary" @onclick="KaydetYetkiler">
                <i class="oi oi-task me-1"></i> Yetkileri Kaydet
            </button>
        </div>
        
        <hr />

        <div class="row">
            @foreach (var menuGrubu in menuler.GroupBy(m => m.MenuGroup).OrderBy(g => g.Key))
            {
                <div class="col-12 mb-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-dark text-white fw-bold">
                            @menuGrubu.Key <!-- Kategori Adı -->
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @foreach (var menu in menuGrubu.OrderBy(m => m.Ad))
                                {
                                    <div class="col-md-4 col-lg-3 mb-2">
                                        <div class="form-check form-switch">
                                            <input type="checkbox"
                                                   class="form-check-input"
                                                   role="switch"
                                                   id="menu-@menu.Id"
                                                   checked="@menuSecimleri.GetValueOrDefault(menu.Id)"
                                                   @onchange="@((ChangeEventArgs e) => OnCheckboxChanged(menu.Id, e))" />
                                            <label class="form-check-label" for="menu-@menu.Id">@menu.Ad</label>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (guncellemeMesajiGoster)
        {
            <div class="alert alert-success mt-3" role="alert">
                Yetkiler başarıyla güncellendi!
            </div>
        }
    }
}

@code {
    private List<Rol>? roller;
    private List<Menu>? menuler;
    private Dictionary<int, bool> menuSecimleri = new();
    private int SeciliRolId;
    private bool guncellemeMesajiGoster = false;

    protected override async Task OnInitializedAsync()
    {
        roller = await RolService.GetAllAsync();
        menuler = await MenuService.GetAllAsync();
    }

    private async Task OnRolChanged(ChangeEventArgs e)
    {
        guncellemeMesajiGoster = false;
        if (int.TryParse(e.Value?.ToString(), out int rolId) && rolId > 0)
        {
            SeciliRolId = rolId;
            await YukleMenuYetkileri();
        }
        else
        {
            SeciliRolId = 0;
            menuSecimleri.Clear();
        }
        StateHasChanged();
    }

    private async Task YukleMenuYetkileri()
    {
        menuSecimleri.Clear();
        if (menuler is null || SeciliRolId == 0) return;

        var yetkiler = await YetkiService.GetByRolIdAsync(SeciliRolId);

        foreach (var menu in menuler)
        {
            bool yetkiliMi = yetkiler.Any(y => y.MenuId == menu.Id && y.GormeYetki);
            menuSecimleri[menu.Id] = yetkiliMi;
        }
    }

    private void OnCheckboxChanged(int menuId, ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out var isChecked))
        {
            menuSecimleri[menuId] = isChecked;
        }
    }


    private void TumunuSec()
    {
        var menuIds = menuSecimleri.Keys.ToList();
        foreach (var id in menuIds)
        {
            menuSecimleri[id] = true;
        }
    }


    private void TumSecimleriKaldir()
    {
        var menuIds = menuSecimleri.Keys.ToList();
        foreach (var id in menuIds)
        {
            menuSecimleri[id] = false;
        }
    }

    private async Task KaydetYetkiler()
    {
        guncellemeMesajiGoster = false;

        var yeniYetkiler = menuSecimleri
            .Select(x => new Yetki
            {
                RolId = SeciliRolId,
                MenuId = x.Key,
                GormeYetki = x.Value, 
                DuzenlemeYetki = false 
            }).ToList();

        await YetkiService.UpdateRoleMenuPermissionsAsync(SeciliRolId, yeniYetkiler);

        guncellemeMesajiGoster = true;
        StateHasChanged();


        await Task.Delay(3000);
        guncellemeMesajiGoster = false;
        StateHasChanged();
    }
}