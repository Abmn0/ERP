@page "/personel-resim-detay/{PersonelId:int}"
@inject IPersonelResimService PersonelResimService
@inject NavigationManager Navigation

<h3>Personel Resim Detay</h3>

@if (!string.IsNullOrEmpty(mesaj))
{
    <div class="alert alert-info">@mesaj</div>
}

@if (personelResim?.ResimData != null)
{
    <img src="data:image/@personelResim.ImageFormat;base64,@Convert.ToBase64String(personelResim.ResimData)" width="200" class="rounded border mb-3" />
    <br />

    <InputFile OnChange="HandleFileSelected" />
    <div class="mt-2">
        <button class="btn btn-primary me-2" @onclick="Guncelle">Güncelle</button>
        <button class="btn btn-danger me-2" @onclick="Sil">Sil</button>
        <button class="btn btn-secondary" @onclick="GeriDon">Geri Dön</button>
    </div>
}
else
{
    <p>Resim yok. Yeni bir resim seçip yükleyin:</p>
    <InputFile OnChange="HandleFileSelected" />
    <div class="mt-2">
        <button class="btn btn-success me-2" @onclick="Kaydet">Yükle</button>
        <button class="btn btn-secondary" @onclick="GeriDon">Geri Dön</button>
    </div>
}

@code {
    [Parameter] public int PersonelId { get; set; }

    private PersonelResim? personelResim;
    private byte[]? yeniResim;
    private string? yeniFormat;
    private string? mesaj;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            personelResim = await PersonelResimService.GetByPersonelIdAsync(PersonelId);
        }
        catch (Exception ex)
        {
            mesaj = $"Hata oluştu: {ex.Message}";
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var format = Path.GetExtension(file.Name)?.TrimStart('.');
            yeniFormat = format;

            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);
            yeniResim = stream.ToArray();
        }
        catch (Exception ex)
        {
            mesaj = $"Dosya okunurken hata oluştu: {ex.Message}";
        }
    }

    private async Task Kaydet()
    {
        try
        {
            if (yeniResim is null || string.IsNullOrEmpty(yeniFormat))
            {
                mesaj = "Lütfen bir resim seçin.";
                return;
            }

            var yeniKayit = new PersonelResim
                {
                    PersonelId = PersonelId,
                    ResimData = yeniResim,
                    ImageFormat = yeniFormat
                };

            await PersonelResimService.AddAsync(yeniKayit);
            mesaj = "Resim yüklendi.";
            Navigation.NavigateTo("/personeller", true);
        }
        catch (Exception ex)
        {
            mesaj = $"Yükleme sırasında hata oluştu: {ex.Message}";
        }
    }

    private async Task Guncelle()
    {
        try
        {
            if (personelResim is null || yeniResim is null || string.IsNullOrEmpty(yeniFormat))
            {
                mesaj = "Lütfen yeni bir resim seçin.";
                return;
            }

            personelResim.ResimData = yeniResim;
            personelResim.ImageFormat = yeniFormat;

            await PersonelResimService.UpdateAsync(personelResim);
            mesaj = "Resim güncellendi.";
            Navigation.NavigateTo("/personeller", true);
        }
        catch (Exception ex)
        {
            mesaj = $"Güncelleme sırasında hata oluştu: {ex.Message}";
        }
    }

    private async Task Sil()
    {
        try
        {
            if (personelResim != null)
            {
                await PersonelResimService.DeleteAsync(personelResim.PersonelResimId);
                mesaj = "Resim silindi.";
                Navigation.NavigateTo("/personeller", true);
            }
        }
        catch (Exception ex)
        {
            mesaj = $"Silme sırasında hata oluştu: {ex.Message}";
        }
    }

    private void GeriDon()
    {
        Navigation.NavigateTo("/personeller");
    }
}
