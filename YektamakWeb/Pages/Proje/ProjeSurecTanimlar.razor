@page "/proje-surec-tanimlar"
@inherits YektamakWeb.Shared.AuthorizedPageBase

@inject IProjeSurecTanimService ProjeSurecTanimService
@inject NavigationManager Navigation
@using Models
@using ApiService.Interfaces
@using Microsoft.AspNetCore.Components.Forms


<h3>Proje Süreç Tanımları</h3>

@if (!ErisimKontrolEdildi)
{
    <p>Sayfa yükleniyor...</p>
}
else if (!ErisimVar)
{
    <p class="text-danger">Bu sayfaya erişim yetkiniz yok.</p>
}
else
{
    <EditForm Model="@seciliSurec" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-3">
            <div class="col-md-6">
                <label>Süreç Adı</label>
                <InputText class="form-control" @bind-Value="seciliSurec.Ad" />
            </div>
        </div>

        <button class="btn btn-success" type="submit">@(seciliSurec.Id == 0 ? "Ekle" : "Güncelle")</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="Temizle">Temizle</button>
    </EditForm>

    <hr />

    <table class="table table-bordered mt-3">
        <thead class="table-light">
            <tr>
                <th>Süreç Adı</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in surecler)
            {
                <tr>
                    <td>@s.Ad</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => Duzenle(s)">Düzenle</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Sil(s.Id)">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProjeSurecTanim> surecler = new();
    private ProjeSurecTanim seciliSurec = new();

    protected override string GercekSayfaYolu => "/proje-surec-tanimlar";

    protected override async Task OnSayfaYuklendi()
    {
        await Yukle();
    }

    private async Task Yukle()
    {
        surecler = await ProjeSurecTanimService.GetAllAsync();
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(seciliSurec.Ad))
            return;

        if (seciliSurec.Id == 0)
        {
            await ProjeSurecTanimService.AddAsync(seciliSurec);
        }
        else
        {
            await ProjeSurecTanimService.UpdateAsync(seciliSurec);
        }

        await Yukle();
        Temizle();
    }

    private void Duzenle(ProjeSurecTanim s)
    {
        seciliSurec = new ProjeSurecTanim
            {
                Id = s.Id,
                Ad = s.Ad
            };
    }

    private async Task Sil(int id)
    {
        await ProjeSurecTanimService.DeleteAsync(id);
        await Yukle();
    }

    private void Temizle()
    {
        seciliSurec = new();
    }
}
